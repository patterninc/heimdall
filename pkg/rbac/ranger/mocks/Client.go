// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	ranger "github.com/patterninc/heimdall/pkg/rbac/ranger"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetGroups provides a mock function with no fields
func (_m *Client) GetGroups() (map[string]*ranger.Group, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 map[string]*ranger.Group
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*ranger.Group, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*ranger.Group); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*ranger.Group)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicies provides a mock function with given fields: serviceName
func (_m *Client) GetPolicies(serviceName string) ([]*ranger.Policy, error) {
	ret := _m.Called(serviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicies")
	}

	var r0 []*ranger.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*ranger.Policy, error)); ok {
		return rf(serviceName)
	}
	if rf, ok := ret.Get(0).(func(string) []*ranger.Policy); ok {
		r0 = rf(serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ranger.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with no fields
func (_m *Client) GetUsers() (map[string]*ranger.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 map[string]*ranger.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*ranger.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*ranger.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*ranger.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
